//Geo3x3 Implentation
//Copyright (C) 2021 Kristopher Tate
//
//Released under CC0 License
//<https://creativecommons.org/publicdomain/zero/1.0/legalcode>

// test: zen test geo3x3.zen
// get zen: https://zen-lang.org/ja-JP/download/

const std = @import("std");
const testing = std.testing;

/// Geo3x3 Implentation
pub const Geo3x3 = struct {
  ///Encodes geo3x3 code from WGS84 coordinate system
  pub fn encode_from_wgs84(lat: f64, lng: f64, level: u8, result: []mut u8) ![]u8 {
    if (level < 1) {
      return error.InvalidLevel;
    }
    
    if (result.len < level) {
      return error.NoSpace;
    }

    var _lng = lng;
    var _lat = lat;

    if (_lng < 0) {
      _lng += 180.0;
      result[0] = 'W';
    } else {
      result[0] = 'E';
    }

    _lat = 90.0 + _lat;

    var unit: f64 = 180.0;

    var i: u8 = 1;
    while( i < level ) {
      unit /= 3;
      const x = @floatToInt(u8, _lng / unit);
      const y = @floatToInt(u8, _lat / unit);
      result[i] = '0' + x + (y*3) + 1;
      _lng -= @intToFloat(f64, x) * unit;
      _lat -= @intToFloat(f64, y) * unit;
      i += 1;
    }

    return result[0..i];
  }

  const Result = struct {
    /// level of detail
    pub level: u8,
    /// latitude in WGS84
    pub lat:   f64,
    /// longitude in WGS84
    pub lng:   f64,
    /// unit of detail
    pub unit:  f64,
  };

  ///Decodes geo3x3 code into WGS84 coordinate system
  pub fn decode_to_wgs84(code: []u8) !Result {
    if (code.len < 1) {
      return error.InvalidCode;
    }

    var lat: f64 = 0.0;
    var lng: f64 = 0.0;
    var unit: f64 = 180.0;

    var level: u8 = 1;
    for (code[1..]) |c| {
      switch (c) {
        '1' ... '9' => {},
        else => {
          return error.InvalidCode;
        }
      }
      const n: u8 = c - '1';
      unit /= 3;
      lng += @intToFloat(f64, (n % 3)) * unit;
      lat += @intToFloat(f64, (n / 3)) * unit;
      level += 1;
    }

    lat += unit / 2;
    lng += unit / 2;
    lat -= 90.0;

    if (code[0] == 'W') {
      lng -= 180.0;
    }

    return Result{
      .level = level,
      .lat = lat,
      .lng = lng,
      .unit = unit,
    };

  }
};

test "encode" {
  var data = [_]u8{'A'}**14;
  const res = try Geo3x3.encode_from_wgs84(35.65858, 139.745433, 14, &mut data);
  std.testing.equalStrings("E9139659937288", &data);
}

test "decode" {
  const res = try Geo3x3.decode_to_wgs84("E9139659937288");
  std.testing.equal(res.level, 14);
  std.testing.equal(res.lat, 3.56586337900162e+01);
  std.testing.equal(res.lng, 1.3974546563023935e+02);
  std.testing.equal(res.unit, 1.1290058538953522e-04);
}
